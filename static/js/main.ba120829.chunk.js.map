{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","numberOfPages","Math","ceil","length","numberPagesOnArr","Array","from","map","_","i","needChangPage","page","className","classNames","disabled","href","onClick","number","active","items","to","numbers","n","push","getNumbers","App","useState","setPerPage","setCurrentPage","start","end","min","itemsTake","slice","id","defaultValue","onChange","e","Number","target","value","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"oNASaA,EAAa,SAAC,GAKP,IAJlBC,EAIiB,EAJjBA,MACAC,EAGiB,EAHjBA,QACAC,EAEiB,EAFjBA,YACAC,EACiB,EADjBA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAMO,OAASN,GACzCO,EAAmBC,MAAMC,KAAK,CAAEH,OAAQH,IAC3CO,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAEfC,EAAgB,SAACC,GACjBA,IAASb,GACXC,EAAaY,IAIjB,OACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CACrCC,SAAUhB,IAAgBM,EAAiB,KAD7C,SAIE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAK,QACL,gBAAejB,IAAgBM,EAAiB,GAAK,OAAS,QAC9DY,QAAS,WACHlB,IAAgBM,EAAiB,IACnCM,EAAcZ,EAAc,IAPlC,oBAcDM,EAAiBG,KAAI,SAACU,GAAD,OACpB,oBACEL,UAAWC,IAAW,YAAa,CACjCK,OAAQpB,IAAgBmB,IAF5B,SAME,mBACE,UAAQ,WACRL,UAAU,YACVG,KAAI,WAAMjB,GACVkB,QAAS,kBAAMN,EAAcO,IAJ/B,SAMGA,KAREA,MAYT,oBAAIL,UAAWC,IAAW,YAAa,CACrCC,SAAUhB,IAAgBM,EAAiBD,SAD7C,SAIE,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAK,QACL,gBACEjB,IAAgBM,EAAiBD,OAAS,OAAS,QAErDa,QAAS,WACHlB,IAAgBM,EAAiBD,QACnCO,EAAcZ,EAAc,IATlC,wBC5DFqB,ECNC,SAAoBb,EAAcc,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIhB,EAAMgB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBjB,KAAI,SAAAe,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAO7B,EAAP,KAAgB8B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAO5B,EAAP,KAAoB8B,EAApB,KAaMC,GAAS/B,EAAc,GAAKD,EAC5BiC,EAAM7B,KAAK8B,IAAIF,EAAQhC,EAASsB,EAAMhB,QACtC6B,EAAYb,EAAMc,MAAMJ,EAAOC,GAErC,OACE,sBAAKlB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWd,EADX,mBACiC+B,EAAQ,EADzC,cACgDC,EADhD,aAIA,sBAAKlB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRsB,GAAG,kBACHtB,UAAU,eACVuB,aAAa,IACbC,SAAU,SAACC,GA1BI,IAAC1B,KA0BkB2B,OAAOD,EAAEE,OAAOC,UAzB7C3C,IACX+B,EAAe,GACfD,EAAWhB,KAkBP,UAOE,wBAAQ6B,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkB7B,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACEhB,MAAOuB,EACPtB,QAASA,EACTC,YAAaA,EACbC,aA/Cc,SAACY,GACnBiB,EAAejB,MAiDb,6BACGqB,EAAUzB,KAAI,SAACmC,GAAD,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YE9DlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ba120829.chunk.js","sourcesContent":["import classNames from 'classnames';\n\ntype Pagination1 = {\n  total: string[],\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: Pagination1) => {\n  const numberOfPages = Math.ceil(total.length / perPage);\n  const numberPagesOnArr = Array.from({ length: numberOfPages })\n    .map((_, i) => i + 1);\n\n  const needChangPage = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', {\n        disabled: currentPage === numberPagesOnArr[0],\n      })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === numberPagesOnArr[0] ? 'true' : 'false'}\n          onClick={() => {\n            if (currentPage !== numberPagesOnArr[0]) {\n              needChangPage(currentPage - 1);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n      {numberPagesOnArr.map((number) => (\n        <li\n          className={classNames('page-item', {\n            active: currentPage === number,\n          })}\n          key={number}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${currentPage}`}\n            onClick={() => needChangPage(number)}\n          >\n            {number}\n          </a>\n        </li>\n      ))}\n      <li className={classNames('page-item', {\n        disabled: currentPage === numberPagesOnArr.length,\n      })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={\n            currentPage === numberPagesOnArr.length ? 'true' : 'false'\n          }\n          onClick={() => {\n            if (currentPage !== numberPagesOnArr.length) {\n              needChangPage(currentPage + 1);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const onPageChang = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const needChangPerPage = (page: number) => {\n    if (page !== perPage) {\n      setCurrentPage(1);\n      setPerPage(page);\n    }\n  };\n\n  const start = (currentPage - 1) * perPage;\n  const end = Math.min(start + perPage, items.length);\n  const itemsTake = items.slice(start, end);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${start + 1} - ${end} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            defaultValue=\"5\"\n            onChange={(e) => needChangPerPage(Number(e.target.value))}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={items}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChang}\n      />\n\n      <ul>\n        {itemsTake.map((item) => (\n          <li data-cy=\"item\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}